#! /usr/bin/env bash


GENERATOR_SCRIPTS=$@

if [[ -z "$GENERATOR_SCRIPTS" ]]; then

	echo_warning "Autodetecting script directories 'job_plan_*'"
	GENERATOR_SCRIPTS="$(ls -d job_plan_*/)"

	if [[ -z "$GENERATOR_SCRIPTS" ]]; then
		echo ""
		echo "ERROR: No script directories "job_plan_*" found"
	fi
fi



JOBS=""
PREV_JOBID=""
for GENERATOR_SCRIPT in $GENERATOR_SCRIPTS; do
	# cleanup name
	GENERATOR_SCRIPT=$(basename "${GENERATOR_SCRIPT}")

	echo_info_hline
	echo_info "Using script '${GENERATOR_SCRIPT}' for generation of spectral transformation plans"
	JOB_SCRIPT_DIR="${GENERATOR_SCRIPT}"
	JOB_SCRIPT="${GENERATOR_SCRIPT}/run.sh"

	echo_info "Updating ${JOB_SCRIPT} with job dependencies and copy instructions for existing plans"

	if [[ -n "$PREV_JOBID" ]]; then 
		if true; then
			if [[ -z "$MULE_JOB_SCHEDULER_DEPENDENCY" ]]; then
				echo_info " + job dependency: No variable MULE_JOB_SCHEDULER_DEPENDENCY set, hence not using any job scheduler dependency"
			else
				echo_info " + job dependency: setting dependency to job id ${PREV_JOBID}"

				# Append dependency
				# This line depends on each job scheduler
				NEWPARAM="${MULE_JOB_SCHEDULER_DEPENDENCY/\%JOBID\%/${PREV_JOBID}}"

				# Search for 1st batch job prefix add dependency information
				sed -i -r  "0,/#[a-Z]+/{s/#[a-Z]+/& $NEWPARAM\n&/}"  "${JOB_SCRIPT}"
			fi
		fi

		# Copy SHTNS plan to current working directory
		sed -i "s/# %SCRIPT_EXEC_PREFIX%/mv ..\/shtns_cfg .\/ || exit 1\n&/" "${JOB_SCRIPT}"
		sed -i "s/# %SCRIPT_EXEC_PREFIX%/mv ..\/shtns_cfg_fftw .\/ || exit 1\n&/" "${JOB_SCRIPT}"
	fi

	# Copy (updated) SHTNS plans back to main benchmark directory
	sed -i "s/# %SCRIPT_EXEC_SUFFIX%/cp shtns_cfg ..\/ || exit 1\n&/" "${JOB_SCRIPT}"
	sed -i "s/# %SCRIPT_EXEC_SUFFIX%/cp shtns_cfg_fftw ..\/ || exit 1\n&/" "${JOB_SCRIPT}"

	# Rename plan files to indicate a successful plan generation
	sed -i "s/# %SCRIPT_EXEC_SUFFIX%/mv shtns_cfg shtns_cfg_SUCCESS || exit 1\n&/" "${JOB_SCRIPT}"
	sed -i "s/# %SCRIPT_EXEC_SUFFIX%/mv shtns_cfg_fftw shtns_cfg_fftw_SUCCESS || exit 1\n&/" "${JOB_SCRIPT}"


	# Remove EXEC_* tags to cleanup things
	sed -i "s/# %SCRIPT_EXEC_PREFIX%//" "${JOB_SCRIPT}"
	sed -i "s/# %SCRIPT_EXEC_SUFFIX%//" "${JOB_SCRIPT}"


	echo_info "Submitting job..."
	if [[ -z "$MULE_JOB_SCHEDULER_DEPENDENCY" ]]; then

		echo_info " + No job scheduler detected, executing job directly..."

		# This is very likely a non-job-scheduler platform
		# => Directly execute job
		echo ./platform_jobs_run_directly ${JOB_SCRIPT_DIR}
		./platform_jobs_run_directly ${JOB_SCRIPT_DIR} || echo_error_exit "Failed to execute job"

		# Abuse PID of just executed script as job id
		PREV_JOBID="DUMMY DEPENDENCY"
	else
		echo_info " + Submitting job to scheduler..."
		JOB_OUTPUT=$(./platform_jobs_submit ${JOB_SCRIPT_DIR} 2>&1)

		if [[ $? -ne 0 ]]; then
			echo_error_hline
			echo_error "ERROR during job submission:"
			echo_error "${JOB_OUTPUT}"
			echo_error_hline
			exit 1
		fi

		PREV_JOBID=$(echo $JOB_OUTPUT | tail -n 1)
	fi

	echo_info " + new job_id: ${PREV_JOBID}"

	JOBS="$JOBS $PREV_JOBID"
done



if [[ -z "$MULE_JOB_SCHEDULER_DEPENDENCY" ]]; then
	echo_success " + All jobs directly executed"
else
	echo_info " + Waiting for jobs ${JOBS}"
	while true; do
		NUM_JOBS=$(./platform_jobs_status $JOBS | wc -l)
		echo_info "Waiting for finished generation jobs: ${NUM_JOBS}"
		test $NUM_JOBS -eq 0 && break
		sleep 1
	done
	echo_success "Done"
fi

exit 0
