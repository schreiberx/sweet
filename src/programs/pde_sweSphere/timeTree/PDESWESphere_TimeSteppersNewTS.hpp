/*
 * Author: Martin SCHREIBER <schreiberx@gmail.com>
 */

#ifndef SRC_PROGRAMS_SWE_SPHERE_TIMESTEPPERS_NEW_TS_HPP_
#define SRC_PROGRAMS_SWE_SPHERE_TIMESTEPPERS_NEW_TS_HPP_

#include <sweet/core/ErrorBase.hpp>

#include <sweet/core/shacks/ShackProgArgDictionary.hpp>
#include <sweet/core/sphere/SphereData_Spectral.hpp>
#include <sweet/core/ErrorBase.hpp>

#include <sweet/timeTree/DESolver_TimeTreeNode_Base.hpp>
#include <sweet/timeTree/DESolver_TimeStepperRegistryAll.hpp>
#include <sweet/timeTree/DESolver_TimeTreeNode_Registry.hpp>

#include <sweet/timeTree/DESolver_TimeStepping_StringParser.hpp>
#include <sweet/timeTree/DESolver_TimeStepping_Tree.hpp>
#include <sweet/timeTree/DESolver_TimeStepping_Assemblation.hpp>

#include "PDESWESphere_DataContainer.hpp"
#include "PDESWESphere_DESolver_Config.hpp"

/**
 * SWE Plane time steppers
 */
class PDESWESphere_TimeSteppersNewTS
{
public:
	sweet::ErrorBase error;

	std::shared_ptr<sweet::DESolver_TimeTreeNode_Base> timeIntegrator;

	// the time stepping tree generated by the string
	sweet::DESolver_TimeStepping_Tree tsTree;

	// A registry of all PDE terms
	sweet::DESolver_TimeTreeNode_Registry pdeTerm_registry;

	// A registry of all time steppers
	sweet::DESolver_TimeTreeNode_Registry timeStepper_registry;

	// Config file for DE solver
	PDESWESphere_DESolver_Config deSolver_Config;
public:
	bool setup_1_registerAllTimesteppers();

public:
	PDESWESphere_TimeSteppersNewTS();

	bool setup_2_timestepper(
			const std::string &i_timestepping_method,
			sweet::ShackDictionary *i_shackDict,
			sweet::SphereOperators *io_ops,
			const PDESWESphere_DataContainer &i_U
	);

	void clear();

	~PDESWESphere_TimeSteppersNewTS();
};




#endif
