


This document contains some brainstorming-like information
on libpfasst and related source code.



c_f_pointer(x,y):
	Convertes C to Fortran pointers
	
3 main blocks:
  * eval RHS
  * transfer operators (prolongation / restriction)
  * encapsulation
  

sweepers
  * Different verions
  * Have to be tailored for the different TS schemes
  * explicit, implicit, imex
  * Example: pf_explicitQ.f90
  
feval:
  * Evaluate RHS of ODE

fNevalD:
  * N = evaluation id or something similar
  * D = dimension

f2comp1:
  * backward Euler
  * not required for explicit-only sweeper
  
  
ncap_*:
  * Encapsulation of data
  * ncap_copy
  * ncap_create
  * ncap_destroy
  * ncap_unpack
  * ...
  
LevelData:
  * Pointer to user-provided data
  
  
Callbacks:
  * The libpfasst library uses function pointers to call user-provided methods
  * Those are setup in e.g. fmain:
     pf%levels[level]%interpolate => ...
     
Hooks:
  * Hooks can be added for additional verbose/debug output:
  * see libpfasst/examples/mpi_ad3/src/main.f90



